---
title: "data_viz"
format: html
editor_options: 
  chunk_output_type: console
---
```{r}
rm(list = ls())
```

```{r}
# General use packages:
library(tidyverse)
library(here)
library(janitor)

# Specifically for plots:
library(patchwork)
library(ggrepel)
library(gghighlight)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)

# And for another dataset we'll explore:
library(gapminder)

# Spatial
library(sf)
```

```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + geom_point() + geom_line()

# or

ggplot(data = lizards) + geom_point(aes(x = total_length, y = weight))

# or

ggplot() + geom_point(data = lizards, aes(x = total_length, y = weight))
```

## playing with plot geometries
```{r}
ggplot(data = lizards, aes(x = total_length)) + geom_histogram()
```

## jitter arbitrarily spreads points around compared to point
```{r}
ggplot(data = lizards, aes(y = common_name, x = weight)) + geom_jitter()
```

# lets make the ugliest graph possible
```{r}
ggplot(lizards, aes(x = weight)) + 
  geom_histogram(color = "orange", 
                 fill = "purple",
                 size = 2,
                 linetype = "dotted")
```

# color?
### coolors.co

# shapes?
### search r shape codes

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(color = "#eb5e28", 
             fill = "#252422",
             shape = 22, 
             size = 3, 
             alpha = 0.4)
```

# updating an aesthetic based on variable
# doing this scale color discrete thing highlights a specific common name
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name, 
                 size = total_length), 
             alpha = 0.2) + 
  scale_color_discrete(type = c("#120309", "#95B2B8", "#95B2B8", "#95B2B8", "#95B2B8", "#95B2B8", "#95B2B8"))
```

# themes
### some cool ones
- theme_minimal()
- theme_bw()
- theme_light()
```{r}
ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal()
```

# axis labels
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  labs(x = "Total length (mm)",
       y = "Weight (grams)",
       title = "Lizard size")
```

# faceting
### splits graph into multiple graphs by every value in a variable
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_wrap(~common_name, ncol = 3, scales = "free") + 
  labs(x = "Total length (mm)",
       y = "weight (grams)")
```

## facets into groups
### groups are, if tail broken or not, sex
### sex on y, tails on x
#### f, j, m merely how sex data was stored
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
```

# reordering
## fct_reorder()
### in this case, reorders common name by highest to lowest count
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()
```

# putting it all together
```{r}
ggplot(lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = common_name, shape = common_name), size = 2) + 
  theme_void() + 
  labs(x = "total length (mm)", y = "weight (g)", color = "lizard species") + 
  facet_wrap(~common_name, scales = "free")
```

# one more
### but how to change labels on sex and tail?
```{r}
ggplot(lizards, aes(y = fct_infreq(common_name))) + 
  geom_bar(aes(fill = site)) + 
  theme_dark() + 
  labs(x = "lizard counts", y = "species") + 
  facet_grid(sex ~ tail)
```

# advanced ggplot customization

### when dealing with scales
- dates: scale_*_date()
- continuous variables: scale_*_continuous()
- discrete variables: scale_*_discrete()
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500), 
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10), 
                     limits = c(0, 70)) +
  theme_light()
```

```{r}
lizards_counts <- lizards %>% mutate(date = lubridate::mdy(date)) %>% count(date)

ggplot(lizards_counts, aes(x = date, y = n)) + 
  geom_line() + 
  scale_x_date(breaks = scales::breaks_width("3 years"), # tick lines are every three years
               labels = scales::label_date("'%y")) # labels dates on x axis, % calls year after the apostrophe
```

### making a gradient
```{r}
ggplot(lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) + 
  scale_color_gradient(low = "red", high = "navy")
```
##### or
```{r}
ggplot(lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) + 
  scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))
```
##### or
```{r}
ggplot(lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = weight)) + 
  scale_color_steps(low = "red", "high" = "black")
```

##### or
```{r}
ggplot(lizards, aes(x = total_length, y = weight)) + 
  geom_point(aes(color = total_length)) + 
  scale_color_steps2(low = "green",
                     mid = "black",
                     high = "red",
                     midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
```

### make custom themes this way
```{r}
p <- ggplot(lizards, aes(x = total_length, y = weight)) + geom_point()

p + 
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "red"),
        plot.background = element_rect(fill = "cyan"), 
text = element_text(size = 12, family = "serif"))
```

### fuck it im just gonna copy paste
```{r}
# Now let's just go bananas with some theme stuff: 

p + 
  theme(panel.background = element_rect(color = "purple", size = 3, fill = "yellow"),
        panel.grid.major.y = element_line(color = "orange"),
        panel.grid.major.x = element_blank(),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "cyan"),
        axis.title.x = element_text(color = "green"),
        axis.title.y = element_text(color = "gray70"),
        text = element_text(size = 12, family="serif"),
        plot.background = element_rect(fill = "pink"))
```

### draw lines on graph
##### also annotation
- annotate(): annotate manually
- geom_hline() add horizontal line
- geom_vline( add vertical line)
```{r}
p +
  annotate("text", x = 140, y = 50, label = "COOL!", color = "purple") +
  annotate("text", x = 400, y = 25, label = "WHOA.", color = "red") +
  geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
  geom_vline(xintercept = 100, linetype = "dashed", color = "green") +
  theme_minimal()
```

```{r}
# Or, have the value be determined based on a variable: 
p +
  geom_hline(yintercept = mean(lizards$weight), linetype = "dashed", color = "red") +
  annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "Mean weight", color = "red")
```

### make an actually good plot i think
```{r}
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(mono, aes(x = year, y = lake_level)) + 
  geom_rect(aes(xmin = 1941, # rect is rectangle
                xmax = 1983,
                ymin = 6350,
                ymax = 6440), 
            fill = "gray90", alpha = 0.5) + 
  geom_line() + # we put line after rectangle so its on top
  labs(x = "year", 
       y = "lake surface level\n(feet above sea level)\n", 
       title = "Mono lake (1850 - 2017", 
       caption = "data: mono basin cleaninghouse") + 
    scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) + 
    scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, by = 20),
                     expand = c(0,0)) + 
  geom_hline(yintercept = 6360, linetype = "dashed") + 
  annotate("text", x = 1910, y = 6370, label = "decreased shrimp abundance expected \n 6360 feet above sea level") + 
  theme_minimal()
```

